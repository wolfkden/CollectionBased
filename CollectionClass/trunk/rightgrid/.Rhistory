jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
}
map(NULL, 400)
map(NULL, 400)
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
system(jobMapScript)
}
map(NULL, 400)
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
}
map(NULL, 400)
system("ruby job_mapper.rb --r_array_size 400  ")
system("ruby job_mapper.rb --r_array_size 400  ")
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
generate<-function(x) map(NULL, x)
oo<-generate(400)
oo<-generate(400)
oo<-generate(400)
oo
oo<-generate(400)
oo<-generate(400)
00
oo<-generate(400)
oo
oo<-generate(400)
oo
oo<-generate(400)
oo
oo<-generate(400)
oo
oo<-generate(400)
oo
func
ff
fn
fDouble<- function(x) x * 2
ox<-map(fDouble, oo)
ox
typeof(fDouble)
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) 2 * x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
ox<-map(fDouble, oo)
ox
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " ")
}
calls<-map(fDouble, oo)
calls
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
#system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double") paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
}
scall<-map(fDouble, oo)
scall
typeof(oo)
length(oo)
length(100)
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
#system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ")
jobMapScript
}
scall<-map(fDouble, oo)
scall
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
#system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ") else jobMapScript
jobMapScript
}
scall <- map(fDouble, oo)
scall
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ") else jobMapScript
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
ox<-map(fDouble, oo)
ox
fDouble
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double") system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ") else jobMapScript
jobMapScript
}
scall<-map(fDouble, oo)
scall
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double" && length(data) == 1) system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ") else jobMapScript
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
ox<-map(fDouble, oo)
ox
oo<-generate(400)
oo
fDouble
ox<-map(fDouble, oo)
ox<-map(fDouble, oo)
save(map, file="r_functions/function.file.map", compress=FALSE, acii=TRUE)
save(map, file="r_functions/function.file.map", compress=FALSE, ascii=TRUE)
save(generate, file="r_functions/function.file.generate", compress=FALSE, ascii=TRUE)
loader
loader<-function(x) {
eval(as.name(load(x)))
}
gf<-loader("r_functions/function.file.map")
mf
mf<-loader("r_functions/function.file.map")
gf<-loader("r_functions/function.file.generate")
gf
save(loader, file="r_functions/function.file.loader", compress=FALSE, ascii=TRUE)
oo<-generator(1000)
oo<-generate(1000)
oo
ox<-map(fDouble, oo)
ox
oo<-generate(10000)
length(oo)
ox<-map(fDouble, oo)
ox
ox<-map(fDouble, oo)
fact(x) <-function(x) if(x < 1) 1 else x * f(x - 1)
fact <-function(x) if(x < 1) 1 else x * fact(x - 1)
fact(4)
fact(5)
oo
ox<-map(oo, fact)
ox<-map(fact, oo)
ox<-map(fact, oo)
ff <-function(x) if(x < 1) 1 else x * ff(x - 1)
ox<-map(ff, oo)
as.name("aa")<-function(x) x + 1
ff<-eval(as.name(load('/tmp/s3_in/14290_function.file.Thu-Dec-23-16:14:48-2010')))
fact<-function(x) if(x<1) 1 else x * fact(x-1)
fact(4)
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
load(funcFile)
funcFile
aa<-load(funcFile)
aa<-load(funcFile)
aa
aa<-as.name(aa)
aa
func
showName<-function(x) as.character(x)
showName(func)
aa<-load(funcFile)
globalenv
objects()
aa<-quote("function(x) x + 1")
aa<-eval(aa)
aa
aa<-quote("function(x) x + 1")
aa<-as.name(aa)
aa
aa<-eval(aa)
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
funcName<-load(funcFile)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double" && length(data) == 1) system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, " ") else jobMapScript
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
ox<-map(ff, oo)
map<-function(func=NULL, data=NULL) {
dateExt<-gsub(" ", "-", date())
func<-if(is.null(func) || typeof(func) != "closure") function(x) x else func
funcFile <- gsub(" ", "", paste("function.file.", dateExt, "")) 
save(func, file=funcFile, compress=FALSE, ascii=TRUE)
funcName<-load(funcFile)
dataFile <- gsub(" ", "", paste("data_", dateExt, ""))
if(is.null(data) || typeof(data) == "double" && length(data) == 1) system(paste("touch", dataFile, " ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, " "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", data, "--r_function", funcName, " ") else jobMapScript
jobMapScript
system(jobMapScript)
system("ruby aggregate_results.rb")
scan(gsub(" ", "", paste("output/", dataFile, "_output", "")))
}
history()
history(100)
length(oo)
func
ox<-map(func, (1:400))
ox
exit
q()
fa
fa<-function(x) x + 1
ox<-map(fa, c(1:2^12))
map<-function(ff = NULL, data = NULL) {
dateExt<-gsub(" ", "-", date())
llist<-if(is.null(ff) || typeof(ff) != "closure") { assign("ff", as.function(function(x) x), pos=sys.frame());funcTree(ff, sys.frame()) } else funcTree(as.character(as.list(match.call())$ff))
funcName <- as.character(as.list(match.call())$ff)
if(is.null(as.list(match.call())$ff)) funcName<-"identity"
funcFile <- paste("function.file.", funcName, ".", dateExt, sep="") 
save(llist, writeTree, file=funcFile, compress=FALSE, ascii=TRUE)
dataFile <- paste("data_", dateExt, sep="")
if(is.null(data) || typeof(data) == "double" && length(data) == 1) system(paste("touch", dataFile, sep=" ")) else write(data, file=dataFile)
jobMapScript <- "ruby job_mapper.rb"
system(paste("ruby loadFileS3.rb --data", dataFile, "--code", funcFile, sep=" "))
jobMapScript <- if(typeof(data) == "double" && length(data) == 1) paste(jobMapScript, "--r_array_size", formatC(data, digits=40, width=-1), "--r_function", funcName, sep=" ") else jobMapScript
jobMapScript
btime<-Sys.time()
system(jobMapScript)
etime<-Sys.time()
system("ruby aggregate_results.rb")
print(etime-btime)
scan(paste("output/", dataFile, "_output", sep=""))
}
ox<-map(fa, c(1:2^12))
require('codetools')
funcSearch<-function(x, fTree)
{
  rval <- ""
  for(fi in names(fTree)) if(x == fi || x == funcSearch(x, fTree[[fi]])) rval<-x
  return(rval)
}
writeTree<-function(fTree, envir=sys.frame())
{
  if(!is.list(fTree) || length(fTree) < 1) return()
  for(tag___ in names(fTree)) if(regexpr("___$", tag___) < 0)
  {
     writeTree(fTree[[tag___]], envir)
     print(tag___)
     f_alist___<-as.list(fTree[[tag___]]$formals___)
     f_alist___[[length(f_alist___)+1]]<-fTree[[tag___]]$body___
     assign(tag___, as.function(as.list(f_alist___)), pos=envir)
     tag___
  }
}
funcTree<-function(fn, last=list(), envir=sys.frame())
{
  require('codetools')
  fname___<-if(is.character(fn)) fn else as.character(as.list(match.call())$fn)
  print(fname___)
  fn<-eval(as.name(fname___), envir=envir)
  print(typeof(fn))
  if(typeof(fn) != "closure") return(NULL)
  ll<-list()
  ll[[fname___]]<-list()
  ll$last___<-last
  ll[[fname___]]$formals___<-formals(fn)
  ll[[fname___]]$body___<-body(fn)
  top<-ll
  while(0 < length(top$last___)) top<-top$last___
  for(fi in as.list(findGlobals(fn)))
  if(fi != funcSearch(fi, top) && !is.null(li<-funcTree(fi, ll)))
  { print(fi); ll[[fname___]][[fi]]<-li[[fi]] }
  return(ll)
}
ox<-map(fa, c(1:2^12))
q()
objects()
F
system("ls r_function")
system("ls r_functions")
require("codetools")
require("yaml")
source("r_functions/Collection.R")
source("r_functions/funcTree.R")
objects()
fq<-function(x) { for(y in 1:2^10) y; x; }
fq(2)
fq<-function(x) { for(y in 1:2^10) y; x + 1; }
fq(2)
timeThis(cx<-generate(new("Collection", 2^25)))
objects()
rm(cx)
source("r_functions/Collection.R")
timeThis(cx<-generate(new("Collection", 2^26)))
source("r_functions/Collection.R")
timeThis(cx<-generate(new("Collection", 2^30)))
source("r_functions/Collection.R")
timeThis(cx<-generate(new("Collection", 2^32)))
length(cx@collection)
length(cx@workers)
timeThis(cx<-generate(new("Collection", 2^30)))
fq
timeThis(cc<-map(cx, fq))
length(cc@workers)
fq<-function(x) { for(y in 1:2^8) y; x + 1; }
length(cx@workers)
fq<-function(x) { for(y in 1:2^4) y; x + 1; }
timeThis(cc<-map(cx, fq))
objects()
clonedObject<-clone(cx, cx)
clonedObject@YAMLcollection
clonedObject@identifier
clonedObject@SessionID
clonedObject@identifier = cx@identifier
clonedObject@identifier
clonedObject@identifier= "cid20110225_1120413"
clonedObject<-setWorkers(clonedObject)
source("r_functions/Collection.R")
clonedObject<-clone(cx, cx)
clonedObject@identifier= "cid20110225_1120413"
clonedObject<-setWorkers(clonedObject)
clonedObject<-clone(cx, cx)
clonedObject@identifier= "cid20110225_1120413"
source("r_functions/Collection.R")
clonedObject<-setWorkers(clonedObject)
objects()
rm(clonedObject)
q()
source("r_functions/Collection.R")
clonedObject<-clone(cx, cx)
require("yaml")
require("codetools")
clonedObject<-clone(cx, cx)
clonedObject@identifier= "cid20110225_1120413"
clonedObject<-setWorkers(clonedObject)
.SessionID
cx@SessionIF
cx@SessionID
clonedObject<-clone(cx, cx)
clonedObject@identifier= "cid20110225_1120413"
clonedObject@SessionID
clonedObject@SessionID = cx@SessionID
clonedObject<-setWorkers(clonedObject)
length(cx@collection)
co<-cx@collection
length(cx@workers)
length(co@workers)
co@workers
co
class(co)
type(co)
co@collection
co@collection[[1]]
co$collection
attributes(co)
names(co)
co@SessionID
co[[1]]
length(co)
co<-cx@collection[[1]]
co$collection
co@collection
2^30
length(co@workers)
size(co)
length(co)
co.length
ls(co)
help(ls)
class(co)
source("r_functions/Collection.R")
objects()
rm(co, clonedObject)
clonedObject<-clone(cx, cx)
clonedObject@SessionID = cx@SessionID
clonedObject@identifier= "cid20110225_1120413"
clonedObject<-setWorkers(clonedObject)
rm(clonedObject)
source("r_functions/Collection.R")
clonedObject<-clone(cx, cx)
clonedObject@SessionID = cx@SessionID
clonedObject@identifier= "cid20110225_1120413"
clonedObject<-setWorkers(clonedObject)
length(clonedObject@workers)
objects()
history(pattern="timeThis")
timeThis(cc<-map(cx, fq))
source("r_functions/Collection.R")
cx<-generate(new("Collection", 2^20))
source("r_functions/Collection.R")
q()
objects()
length(cx@workers)
rm(cc, cx)
source("r_functions/Collection.R")
source("r_functions/funcTree.R")
require("yaml")
require("codetools")
cx<-generate(new("Collection", 2^18))
fq
fq<-function(x) { for(y in 1:2^16) y; x + 1; }
cc<-map(cx, fq)
fq
for(mod in 16:8) {
body(fq)<-parse(text=paste("{ for(y in 1:2^", mod, ") y; x = x + 1 }", sep=""))
ff<-file("log.512.file", "a")
cat(paste("time difference:", timeThis(cc<-map(cx, fq)), "value:", mod), file=ff, sep="\n")
close(ff)
}
for(mod in 17:22) {
body(fq)<-parse(text=paste("{ for(y in 1:2^", mod, ") y; x = x + 1 }", sep=""))
ff<-file("log.512.file", "a")
cat(paste("time difference:", timeThis(cc<-map(cx, fq)), "value:", mod), file=ff, sep="\n")
close(ff)
}
q()
